# .github/workflows/pr-kaizen.yml
name: PR Build + Kaizen Smoke Test

on:
  pull_request: {}
  workflow_dispatch: {}

env:
  # Commit we’re testing – works for both PRs and manual runs
  IMAGE_TAG: ${{ github.event.pull_request.head.sha || github.sha }}

jobs:
  kaizen:
    runs-on: ubuntu-latest

    # ──────────── secrets + constants we pass straight through to CodeBuild
    env:
      # build account (844) – used to invoke CodeBuild *and* queue Kaizen
      AWS_REGION:                 ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID:          ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY:      ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN:          ${{ secrets.AWS_SESSION_TOKEN }}

      ECR_REGISTRY:               ${{ secrets.ECR_REGISTRY }}
      ECR_URI:                    ${{ secrets.ECR_URI }}

      # 844 “admin” user/role (**needed inside CodeBuild**)
      ADMIN_AWS_ACCESS_KEY_ID:    ${{ secrets.ADMIN_AWS_ACCESS_KEY_ID }}
      ADMIN_AWS_SECRET_ACCESS_KEY:${{ secrets.ADMIN_AWS_SECRET_ACCESS_KEY }}
      ADMIN_AWS_SESSION_TOKEN:    ${{ secrets.ADMIN_AWS_SESSION_TOKEN }}

      # 1229 push creds & region
      KAIZEN_REGION:              ${{ secrets.KAIZEN_REGION }}
      KAIZEN_ECR_REGISTRY:        ${{ secrets.KAIZEN_ECR_REGISTRY }}
      KAIZEN_ECR_URI:             ${{ secrets.KAIZEN_ECR_URI }}
      KAIZEN_ACCESS_KEY_ID:       ${{ secrets.KAIZEN_ACCESS_KEY_ID }}
      KAIZEN_SECRET_ACCESS_KEY:   ${{ secrets.KAIZEN_SECRET_ACCESS_KEY }}
      KAIZEN_SESSION_TOKEN:       ${{ secrets.KAIZEN_SESSION_TOKEN }}

      # Kaizen CLI binary in S3
      KAIZEN_CLI_S3:              ${{ secrets.KAIZEN_CLI_S3 }}

      # Workload details
      KAIZEN_INSTANCE_TYPE: trn1.32xlarge
      KAIZEN_NODE_COUNT:    "1"
      KAIZEN_COMMAND: >-
        python -m vllm.entrypoints.openai.api_server
        --model TinyLlama/TinyLlama-1.1B-Chat-v1.0
        --max-num-seqs 1
        --max-model-len 128
        --tensor-parallel-size 16
        --device neuron
        --use-v2-block-manager
        --override-neuron-config '{}'
        --port 8000

    steps:
    # ────────────────────────────────
    - name: Checkout
      uses: actions/checkout@v4

    # Use 844 creds so this step can call `aws codebuild start-build`
    - name: Configure AWS creds (844 build acct)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-session-token:     ${{ env.AWS_SESSION_TOKEN }}
        aws-region:            ${{ env.AWS_REGION }}

    # ────────────────────────────────
    - name: Kick off CodeBuild (overlay + smoke)
      id: cb_start
      run: |
        set -euo pipefail
        echo "▶ Launching CodeBuild for commit $IMAGE_TAG"

        BUILD_ID=$(aws codebuild start-build \
          --project-name kaizen-poc \
          --source-version "$IMAGE_TAG" \
          --buildspec-override buildspec-full.yml \
          --environment-variables-override \
              name=IMAGE_TAG,value=$IMAGE_TAG,type=PLAINTEXT \
              name=AWS_REGION,value=$AWS_REGION,type=PLAINTEXT \
              name=ECR_REGISTRY,value=$ECR_REGISTRY,type=PLAINTEXT \
              name=ECR_URI,value=$ECR_URI,type=PLAINTEXT \
              name=ADMIN_AWS_ACCESS_KEY_ID,value=$ADMIN_AWS_ACCESS_KEY_ID,type=PLAINTEXT \
              name=ADMIN_AWS_SECRET_ACCESS_KEY,value=$ADMIN_AWS_SECRET_ACCESS_KEY,type=PLAINTEXT \
              name=ADMIN_AWS_SESSION_TOKEN,value=$ADMIN_AWS_SESSION_TOKEN,type=PLAINTEXT \
              name=KAIZEN_REGION,value=$KAIZEN_REGION,type=PLAINTEXT \
              name=KAIZEN_ECR_REGISTRY,value=$KAIZEN_ECR_REGISTRY,type=PLAINTEXT \
              name=KAIZEN_ECR_URI,value=$KAIZEN_ECR_URI,type=PLAINTEXT \
              name=KAIZEN_ACCESS_KEY_ID,value=$KAIZEN_ACCESS_KEY_ID,type=PLAINTEXT \
              name=KAIZEN_SECRET_ACCESS_KEY,value=$KAIZEN_SECRET_ACCESS_KEY,type=PLAINTEXT \
              name=KAIZEN_SESSION_TOKEN,value=$KAIZEN_SESSION_TOKEN,type=PLAINTEXT \
              name=KAIZEN_INSTANCE_TYPE,value=$KAIZEN_INSTANCE_TYPE,type=PLAINTEXT \
              name=KAIZEN_NODE_COUNT,value=$KAIZEN_NODE_COUNT,type=PLAINTEXT \
              name=KAIZEN_COMMAND,value="$KAIZEN_COMMAND",type=PLAINTEXT \
              name=KAIZEN_CLI_S3,value=$KAIZEN_CLI_S3,type=PLAINTEXT \
          --query 'build.id' --output text)

        echo "build_id=$BUILD_ID" >> "$GITHUB_OUTPUT"
        echo "CodeBuild ID: $BUILD_ID"

    # ────────────────────────────────
    - name: Wait for CodeBuild & surface logs
      env:
        BUILD_ID: ${{ steps.cb_start.outputs.build_id }}
      run: |
        set -euo pipefail

        echo "▶ Waiting for CodeBuild to finish…"
        while true; do
          STATUS=$(aws codebuild batch-get-builds --ids "$BUILD_ID" \
                     --query 'builds[0].buildStatus' --output text)
          echo "$(date -u +%FT%TZ) Status: $STATUS"
          [[ "$STATUS" == IN_PROGRESS ]] && sleep 30 || break
        done

        LOG_GROUP=$(aws codebuild batch-get-builds --ids "$BUILD_ID" \
                     --query 'builds[0].logs.groupName' --output text)
        LOG_STREAM=$(aws codebuild batch-get-builds --ids "$BUILD_ID" \
                     --query 'builds[0].logs.streamName' --output text)

        aws logs get-log-events \
          --log-group-name "$LOG_GROUP" \
          --log-stream-name "$LOG_STREAM" \
          --query 'events[].message' --output text > codebuild-kaizen.log || true

        echo "::group::CodeBuild + Kaizen log"
        cat codebuild-kaizen.log
        echo "::endgroup::"

        # bubble failure up to GitHub check
        [[ "$STATUS" == SUCCEEDED ]] || { echo "❌ Build finished with $STATUS"; exit 1; }

    # ────────────────────────────────
    - name: Upload full log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: codebuild-kaizen-${{ env.IMAGE_TAG }}
        path: codebuild-kaizen.log
