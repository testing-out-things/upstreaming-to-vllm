name: PR Kaizen Test - PoC

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  IMAGE_TAG: ${{ github.event.pull_request.head.sha || github.sha }}

concurrency:
  group: kaizen-pr-single-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build and Test in Single CodeBuild Job
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Configure AWS credentials for account 844
      - name: Configure AWS credentials (844)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Single CodeBuild job for both build and test
      - name: Start CodeBuild - Unified Pipeline
        id: unified_build
        run: |
          set -euo pipefail
          echo "🚀 Starting unified build and test pipeline with tag $IMAGE_TAG"
          
          BUILD_ID=$(aws codebuild start-build \
            --project-name kaizen-poc \
            --source-version ${{ env.IMAGE_TAG }} \
            --buildspec-override buildspec-unified.yml \
            --environment-variables-override \
                name=IMAGE_TAG,value=${{ env.IMAGE_TAG }},type=PLAINTEXT \
                name=AWS_REGION,value=${{ secrets.AWS_REGION }},type=PLAINTEXT \
                name=ECR_REGISTRY,value=${{ secrets.ECR_REGISTRY }},type=PLAINTEXT \
                name=ECR_URI,value=${{ secrets.ECR_URI }},type=PLAINTEXT \
                name=ADMIN_AWS_ACCESS_KEY_ID,value=${{ secrets.AWS_ACCESS_KEY_ID }},type=PLAINTEXT \
                name=ADMIN_AWS_SECRET_ACCESS_KEY,value=${{ secrets.AWS_SECRET_ACCESS_KEY }},type=PLAINTEXT \
                name=ADMIN_AWS_SESSION_TOKEN,value=${{ secrets.AWS_SESSION_TOKEN }},type=PLAINTEXT \
                name=KAIZEN_REGION,value=${{ secrets.KAIZEN_REGION }},type=PLAINTEXT \
                name=KAIZEN_ECR_REGISTRY,value=${{ secrets.KAIZEN_ECR_REGISTRY }},type=PLAINTEXT \
                name=KAIZEN_ECR_URI,value=${{ secrets.KAIZEN_ECR_URI }},type=PLAINTEXT \
                name=KAIZEN_ACCESS_KEY_ID,value=${{ secrets.KAIZEN_ACCESS_KEY_ID }},type=PLAINTEXT \
                name=KAIZEN_SECRET_ACCESS_KEY,value=${{ secrets.KAIZEN_SECRET_ACCESS_KEY }},type=PLAINTEXT \
                name=KAIZEN_SESSION_TOKEN,value=${{ secrets.KAIZEN_SESSION_TOKEN }},type=PLAINTEXT \
                name=TP_SIZE,value=16,type=PLAINTEXT \
            --query 'build.id' \
            --output text)
          
          echo "Started CodeBuild build: $BUILD_ID"
          echo "build_id=$BUILD_ID" >> "$GITHUB_OUTPUT"
          echo "📎 View logs: https://console.aws.amazon.com/codesuite/codebuild/projects/kaizen-poc/build/$BUILD_ID"

      - name: Wait for Pipeline to Complete
        env:
          BUILD_ID: ${{ steps.unified_build.outputs.build_id }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail
          echo "⏳ Waiting for unified pipeline: $BUILD_ID"
          
          # Extended timeout for build + test (up to 30 minutes)
          MAX_WAIT_TIME=1800
          ELAPSED_TIME=0
          
          while [ $ELAPSED_TIME -lt $MAX_WAIT_TIME ]; do
            BUILD_INFO=$(aws codebuild batch-get-builds \
              --ids "$BUILD_ID" \
              --query 'builds[0].[buildStatus,phases[?phaseType==`BUILD`].phaseStatus | [0],phases[?phaseType==`POST_BUILD`].phaseStatus | [0]]' \
              --output json)
            
            STATUS=$(echo "$BUILD_INFO" | jq -r '.[0]')
            BUILD_PHASE=$(echo "$BUILD_INFO" | jq -r '.[1] // "PENDING"')
            TEST_PHASE=$(echo "$BUILD_INFO" | jq -r '.[2] // "PENDING"')
            
            echo "$(date -u +%FT%TZ) Status: $STATUS | Build: $BUILD_PHASE | Test: $TEST_PHASE (elapsed: ${ELAPSED_TIME}s)"
            
            case "$STATUS" in
              SUCCEEDED) 
                echo "✅ Pipeline completed successfully!"
                echo "   - Image built and pushed to: ${{ secrets.KAIZEN_ECR_URI }}:${{ env.IMAGE_TAG }}"
                echo "   - Kaizen test passed"
                exit 0
                ;;
              FAILED|FAULT|STOPPED|TIMED_OUT) 
                echo "❌ Pipeline failed with status: $STATUS" >&2
                
                # Get phase-specific failure info
                FAILED_PHASES=$(aws codebuild batch-get-builds --ids "$BUILD_ID" \
                  --query 'builds[0].phases[?phaseStatus==`FAILED`].[phaseType, contexts[0].message]' \
                  --output table)
                
                if [ -n "$FAILED_PHASES" ]; then
                  echo "Failed phases:"
                  echo "$FAILED_PHASES"
                fi
                
                # Try to get last 100 lines of logs
                LOG_GROUP=$(aws codebuild batch-get-builds --ids "$BUILD_ID" \
                  --query 'builds[0].logs.groupName' --output text)
                LOG_STREAM=$(aws codebuild batch-get-builds --ids "$BUILD_ID" \
                  --query 'builds[0].logs.streamName' --output text)
                
                if [ "$LOG_GROUP" != "None" ] && [ "$LOG_STREAM" != "None" ]; then
                  echo "📋 Last 100 lines of build logs:"
                  aws logs tail "$LOG_GROUP" --log-stream-name "$LOG_STREAM" --max-items 100 || true
                fi
                
                exit 1
                ;;
              IN_PROGRESS) 
                sleep 20
                ELAPSED_TIME=$((ELAPSED_TIME + 20))
                ;;
              *) 
                echo "Unknown status: $STATUS"
                sleep 20
                ELAPSED_TIME=$((ELAPSED_TIME + 20))
                ;;
            esac
          done
          
          echo "❌ Pipeline timed out after ${MAX_WAIT_TIME} seconds" >&2
          exit 1

      # Download artifacts if successful
      - name: Download Build Artifacts
        if: success()
        run: |
          BUILD_ID="${{ steps.unified_build.outputs.build_id }}"
          
          # Get S3 location of artifacts
          ARTIFACTS_LOCATION=$(aws codebuild batch-get-builds \
            --ids "$BUILD_ID" \
            --query 'builds[0].artifacts.location' \
            --output text)
          
          if [ "$ARTIFACTS_LOCATION" != "None" ] && [ -n "$ARTIFACTS_LOCATION" ]; then
            echo "📦 Downloading artifacts from: $ARTIFACTS_LOCATION"
            aws s3 cp "$ARTIFACTS_LOCATION" ./artifacts.zip || true
            if [ -f ./artifacts.zip ]; then
              unzip -o ./artifacts.zip || true
              if [ -f image-detail-1229.txt ]; then
                echo "Image details:"
                cat image-detail-1229.txt
              fi
            fi
          fi

      # Add PR comment with results
      - name: Comment PR with Results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const imageTag = '${{ env.IMAGE_TAG }}';
            const buildId = '${{ steps.unified_build.outputs.build_id }}';
            const success = '${{ steps.unified_build.outcome }}' === 'success';
            
            const body = `## Kaizen Test Results ${success ? '✅ Passed' : '❌ Failed'}
            
            **Image Tag:** \`${imageTag}\`
            **CodeBuild Job:** [\`${buildId}\`](https://console.aws.amazon.com/codesuite/codebuild/projects/kaizen-poc/build/${buildId})
            
            ### Pipeline Status
            - **Docker Build:** ${success ? '✅ Success' : '❌ Check logs'}
            - **Image Push:** ${success ? '✅ Success' : '❌ Check logs'}
            - **Kaizen Test:** ${success ? '✅ Success' : '❌ Check logs'}
            
            ${success ? `**Kaizen Image:** \`${{ secrets.KAIZEN_ECR_URI }}:${imageTag}\`` : ''}
            
            View detailed logs in the [CodeBuild Console](https://console.aws.amazon.com/codesuite/codebuild/projects/kaizen-poc/build/${buildId})`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('## Kaizen Test Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
