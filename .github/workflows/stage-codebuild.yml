name: PR Kaizen Test Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  IMAGE_TAG: ${{ github.event.pull_request.head.sha || github.sha }}

concurrency:
  group: kaizen-pr-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build Overlay and Run Kaizen Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Configure AWS credentials for account 844
      - name: Configure AWS credentials (844)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Stage 3: Build overlay image
      - name: Start CodeBuild - Build Overlay Image
        id: build_overlay
        run: |
          set -euo pipefail
          echo "🚀 Stage 3: Building overlay image with tag $IMAGE_TAG from latest 844 base"
          
          BUILD_ID=$(aws codebuild start-build \
            --project-name kaizen-poc \
            --source-version ${{ env.IMAGE_TAG }} \
            --buildspec-override buildspec-stage3-overlay.yml \
            --environment-variables-override \
                name=IMAGE_TAG,value=${{ env.IMAGE_TAG }},type=PLAINTEXT \
                name=AWS_REGION,value=${{ secrets.AWS_REGION }},type=PLAINTEXT \
                name=ECR_REGISTRY,value=${{ secrets.ECR_REGISTRY }},type=PLAINTEXT \
                name=ECR_URI,value=${{ secrets.ECR_URI }},type=PLAINTEXT \
                name=ADMIN_AWS_ACCESS_KEY_ID,value=${{ secrets.AWS_ACCESS_KEY_ID }},type=PLAINTEXT \
                name=ADMIN_AWS_SECRET_ACCESS_KEY,value=${{ secrets.AWS_SECRET_ACCESS_KEY }},type=PLAINTEXT \
                name=ADMIN_AWS_SESSION_TOKEN,value=${{ secrets.AWS_SESSION_TOKEN }},type=PLAINTEXT \
                name=KAIZEN_REGION,value=${{ secrets.KAIZEN_REGION }},type=PLAINTEXT \
                name=KAIZEN_ECR_REGISTRY,value=${{ secrets.KAIZEN_ECR_REGISTRY }},type=PLAINTEXT \
                name=KAIZEN_ECR_URI,value=${{ secrets.KAIZEN_ECR_URI }},type=PLAINTEXT \
                name=KAIZEN_ACCESS_KEY_ID,value=${{ secrets.KAIZEN_ACCESS_KEY_ID }},type=PLAINTEXT \
                name=KAIZEN_SECRET_ACCESS_KEY,value=${{ secrets.KAIZEN_SECRET_ACCESS_KEY }},type=PLAINTEXT \
                name=KAIZEN_SESSION_TOKEN,value=${{ secrets.KAIZEN_SESSION_TOKEN }},type=PLAINTEXT \
            --query 'build.id' \
            --output text)
          
          echo "Started CodeBuild build: $BUILD_ID"
          echo "build_id=$BUILD_ID" >> "$GITHUB_OUTPUT"

      - name: Wait for Overlay Build to Complete
        env:
          BUILD_ID: ${{ steps.build_overlay.outputs.build_id }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail
          echo "⏳ Waiting for overlay build: $BUILD_ID"
          
          while true; do
            STATUS=$(aws codebuild batch-get-builds \
              --ids "$BUILD_ID" \
              --query 'builds[0].buildStatus' \
              --output text)
            
            echo "$(date -u +%FT%TZ) Build status: $STATUS"
            
            case "$STATUS" in
              SUCCEEDED) 
                echo "✅ Overlay build completed successfully"
                break
                ;;
              FAILED|FAULT|STOPPED|TIMED_OUT) 
                echo "❌ Build failed with status: $STATUS" >&2
                aws codebuild batch-get-builds --ids "$BUILD_ID" \
                  --query 'builds[0].phases[?phaseStatus==`FAILED`].[phaseType, contexts[0].message]' \
                  --output table || true
                exit 1
                ;;
              IN_PROGRESS) 
                sleep 15
                ;;
              *) 
                echo "Unknown status: $STATUS"
                sleep 15
                ;;
            esac
          done

      # Stage 4: Run Kaizen vLLM smoke test
      - name: Start CodeBuild - Kaizen vLLM Smoke Test
        id: kaizen_test
        run: |
          set -euo pipefail
          echo "🧪 Stage 4: Running Kaizen vLLM smoke test with image tag $IMAGE_TAG"
          
          BUILD_ID=$(aws codebuild start-build \
            --project-name kaizen-poc \
            --source-version ${{ env.IMAGE_TAG }} \
            --buildspec-override buildspec-stage4-inspect.yml \
            --environment-variables-override \
                name=IMAGE_TAG,value=${{ env.IMAGE_TAG }},type=PLAINTEXT \
                name=AWS_REGION,value=${{ secrets.AWS_REGION }},type=PLAINTEXT \
                name=ADMIN_AWS_ACCESS_KEY_ID,value=${{ secrets.AWS_ACCESS_KEY_ID }},type=PLAINTEXT \
                name=ADMIN_AWS_SECRET_ACCESS_KEY,value=${{ secrets.AWS_SECRET_ACCESS_KEY }},type=PLAINTEXT \
                name=ADMIN_AWS_SESSION_TOKEN,value=${{ secrets.AWS_SESSION_TOKEN }},type=PLAINTEXT \
                name=KAIZEN_ECR_URI,value=${{ secrets.KAIZEN_ECR_URI }},type=PLAINTEXT \
                name=TP_SIZE,value=16,type=PLAINTEXT \
            --query 'build.id' \
            --output text)
          
          echo "Started CodeBuild build: $BUILD_ID"
          echo "test_build_id=$BUILD_ID" >> "$GITHUB_OUTPUT"

      - name: Wait for Kaizen Test to Complete
        env:
          BUILD_ID: ${{ steps.kaizen_test.outputs.test_build_id }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail
          echo "⏳ Waiting for Kaizen test: $BUILD_ID"
          
          # Extended timeout for Kaizen tests (up to 20 minutes)
          MAX_WAIT_TIME=1200
          ELAPSED_TIME=0
          
          while [ $ELAPSED_TIME -lt $MAX_WAIT_TIME ]; do
            STATUS=$(aws codebuild batch-get-builds \
              --ids "$BUILD_ID" \
              --query 'builds[0].buildStatus' \
              --output text)
            
            echo "$(date -u +%FT%TZ) Test status: $STATUS (elapsed: ${ELAPSED_TIME}s)"
            
            case "$STATUS" in
              SUCCEEDED) 
                echo "✅ Kaizen test completed successfully"
                exit 0
                ;;
              FAILED|FAULT|STOPPED|TIMED_OUT) 
                echo "❌ Test failed with status: $STATUS" >&2
                
                # Get detailed error information
                aws codebuild batch-get-builds --ids "$BUILD_ID" \
                  --query 'builds[0].phases[?phaseStatus==`FAILED`].[phaseType, contexts[0].message]' \
                  --output table || true
                
                # Try to get logs
                LOG_GROUP=$(aws codebuild batch-get-builds --ids "$BUILD_ID" \
                  --query 'builds[0].logs.groupName' --output text)
                LOG_STREAM=$(aws codebuild batch-get-builds --ids "$BUILD_ID" \
                  --query 'builds[0].logs.streamName' --output text)
                
                if [ "$LOG_GROUP" != "None" ] && [ "$LOG_STREAM" != "None" ]; then
                  echo "📋 Last 50 lines of build logs:"
                  aws logs tail "$LOG_GROUP" --log-stream-name "$LOG_STREAM" --max-items 50 || true
                fi
                
                exit 1
                ;;
              IN_PROGRESS) 
                sleep 20
                ELAPSED_TIME=$((ELAPSED_TIME + 20))
                ;;
              *) 
                echo "Unknown status: $STATUS"
                sleep 20
                ELAPSED_TIME=$((ELAPSED_TIME + 20))
                ;;
            esac
          done
          
          echo "❌ Test timed out after ${MAX_WAIT_TIME} seconds" >&2
          exit 1

      # Add PR comment with results
      - name: Comment PR with Results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const imageTag = '${{ env.IMAGE_TAG }}';
            const overlayBuildId = '${{ steps.build_overlay.outputs.build_id }}';
            const testBuildId = '${{ steps.kaizen_test.outputs.test_build_id }}';
            const overlaySuccess = '${{ steps.build_overlay.outcome }}' === 'success';
            const testSuccess = '${{ steps.kaizen_test.outcome }}' === 'success';
            
            let status = '❌ Failed';
            if (overlaySuccess && testSuccess) {
              status = '✅ Passed';
            } else if (overlaySuccess && !testSuccess) {
              status = '⚠️ Build succeeded, test failed';
            }
            
            const body = `## Kaizen Test Results ${status}
            
            **Image Tag:** \`${imageTag}\`
            
            ### Build Summary
            - **Overlay Build:** ${overlaySuccess ? '✅ Success' : '❌ Failed'} (Build ID: \`${overlayBuildId}\`)
            - **Kaizen Test:** ${testSuccess ? '✅ Success' : '❌ Failed'} (Build ID: \`${testBuildId}\`)
            
            ${overlaySuccess ? `**Kaizen Image:** \`${{ secrets.KAIZEN_ECR_URI }}:${imageTag}\`` : ''}
            
            View detailed logs in [AWS CodeBuild Console](https://console.aws.amazon.com/codesuite/codebuild/projects/kaizen-poc/history)`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('## Kaizen Test Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
